<<<<<<< HEAD
(()=>{"use strict";class e{constructor(){this.board=[],this.createBoard(),this.hits=[],this.misses=[],this.placedShips=[],this.gameOver=!1,this.sunkShips=[]}createBoard(){let e=0;for(let t=0;t<10;t++){this.board[t]=[];for(let s=0;s<10;s++)e++,this.board[t][s]=e}}placeShip(e,t,s){if(s&&!0===this.validPlacement(t,e.length,!0)){for(let s=0;s<e.length;s++){for(let s=0;s<this.board.length;s++)if(this.board[s].includes(t)){let n=this.board[s].indexOf(t);this.board[s][n]=e.name}t+=10}this.placedShips.push(e)}else if(!s&&!0===this.validPlacement(t,e.length,!1)){for(let s=0;s<e.length;s++){for(let s=0;s<this.board.length;s++)if(this.board[s].includes(t)){let n=this.board[s].indexOf(t);this.board[s][n]=e.name}t+=1}this.placedShips.push(e)}}recieveAttack(e,t){let s=e+t;Number.isInteger(this.board[e][t])?this.misses.push(s):(this.hits.push(s),this.placedShips.forEach((n=>{if(n.name===this.board[e][t])return n.hit(s),n.isSunk(),void(n.isSunk()&&this.sunkShips.push(n))})))}isOver(){return 4===this.sunkShips.length}validPlacement(e,t,s){let n=this.convertPosition(e),i=this.getRow(n),r=this.getCol(n);if(s&&i+t>10)return!1;if(!s&&r+t>10)return!1;if(s)for(let e=0;e<t;e++){if(!Number.isInteger(this.board[i][r]))return!1;i++}else for(let e=0;e<t;e++){if(!Number.isInteger(this.board[i][r]))return!1;r++}return!0}randomlyPlaceShips(e){let t,s,n=!1;for(;!n;)t=Math.floor(100*Math.random())+1,s=Math.random()<.5,this.validPlacement(t,e.length,s)?(n=!0,this.placeShip(e,t,s)):n=!1}convertPosition(e){let t,s,n=e.toString();return e<11?(t=e-1,s=0):100===e?(s=9,t=9):e%10==0?(s=parseInt(n.slice(0,1)),t=9):(s=parseInt(n.slice(0,1)),t=parseInt(n.slice(1,2))-1),s.toString()+t.toString()}getCol(e){return parseInt(e.slice(1,2))}getRow(e){return parseInt(e.slice(0,1))}}class t{constructor(t,s){this.gameboard=new e,this.name=t,this.shots=[],this.oponent=s}attack(e,t){let s=this.gameboard.convertPosition(e),n=this.gameboard.getRow(s),i=this.gameboard.getCol(s);this.shots.includes(e)||(this.shots.push(e),t.gameboard.recieveAttack(n,i),t.gameboard.isOver())}randomAttack(e){let t,s=!1;for(;!s;){t=Math.floor(100*Math.random())+1;let n=this.gameboard.convertPosition(t),i=this.gameboard.getRow(n),r=this.gameboard.getCol(n);if(!this.shots.includes(t))return console.log(t),this.shots.push(t),e.gameboard.recieveAttack(i,r),s=!0,t}}}class s{constructor(e,t){this.length=e,this.isHit=[],this.sunk=!1,this.name=t}hit(e){if(!this.isHit.includes(e)&&this.isHit.length<this.length)return this.isHit.push(e),this.isHit}isSunk(){return this.isHit.length===this.length&&(this.sunk=!0,!0)}}let n=new t("human","computer"),i=new t("computer","human"),r=n.gameboard.board,a=i.gameboard.board,o=new s(5,"carrier"),l=new s(4,"destroyer"),c=new s(3,"submarine"),d=new s(2,"patrol"),u=new s(5,"carrier"),h=new s(4,"destroyer"),m=new s(3,"submarine"),p=new s(2,"patrol");const g=[o,l,c,d],b=[u,h,m,p];let f=0;function S(e){if(f++,4===[].length)return;let t;const s=document.querySelector(".info");null==s||s.classList.remove("info"),null==s||s.classList.add("hide");const u=document.querySelector(".place");null==u||u.classList.remove("hide");const h=document.querySelector(".grid-container"),m=document.querySelector(".ships"),p=document.querySelector(".rotate"),v=document.querySelector(".carrier"),L=document.querySelector(".destroyer"),y=document.querySelector(".submarine"),C=document.querySelector(".patrol");if(1===f){null==p||p.addEventListener("click",(function(){(null==v?void 0:v.classList.contains("rotated"))?(null==m||m.classList.remove("ships-horizontal"),null==m||m.classList.add("ships-vertical"),v.classList.remove("rotated"),null==L||L.classList.remove("rotated"),null==y||y.classList.remove("rotated"),null==C||C.classList.remove("rotated")):(null==m||m.classList.remove("ships-vertical"),null==m||m.classList.add("ships-horizontal"),null==v||v.classList.add("rotated"),null==L||L.classList.add("rotated"),null==y||y.classList.add("rotated"),null==C||C.classList.add("rotated"))}));const t=document.querySelector(".start-game");null==t||t.addEventListener("click",(function(){u.innerHTML="",function(e){document.querySelector("body"),console.log(r);const t=document.querySelector(".place");null==t||t.classList.add("hide");const s=document.querySelector("#main");s.classList.remove("hide"),s.classList.add("main"),document.querySelector(".content"),document.querySelector(".grid1");const o=document.querySelector(".grid-container1");document.querySelector(".title-1").textContent=e;const l=document.querySelector(".sunken1"),c=(document.querySelector(".grid2"),document.querySelector(".grid-container2"));document.querySelector(".title-2").textContent="Computer";const d=document.querySelector(".sunken2"),u=document.querySelector(".who-won"),h=document.createElement("button");h.classList.add("restart"),h.textContent="Restart",h.addEventListener("click",(function(){location.reload()})),b.forEach((e=>{i.gameboard.randomlyPlaceShips(e)}));let m=0;for(let e=0;e<r.length;e++)for(let t=0;t<r[e].length;t++){m++;const s=document.createElement("div");s.setAttribute("hposition",m),Number.isInteger(r[e][t])||s.classList.add("ship-here"),s.classList.add("grid-item"),null==o||o.appendChild(s)}for(let t=0;t<a.length;t++)for(let s=0;s<a[t].length;s++){const o=document.createElement("div");o.setAttribute("cposition",a[t][s]),o.classList.add("grid-item"),o.classList.add("ai-grid"),o.addEventListener("click",(function(){if(o.classList.contains("hit")||o.classList.contains("miss")||n.gameboard.isOver()||i.gameboard.isOver())return;if(Number.isInteger(a[t][s]))o.classList.add("miss");else{o.classList.add("hit");let n=!1;if(i.gameboard.recieveAttack(t,s),i.gameboard.placedShips.forEach((e=>{e.name===a[t][s]&&(n=e.sunk)})),n){const n=document.createElement("h2");if(n.textContent=a[t][s],null==d||d.appendChild(n),i.gameboard.isOver()){const t=document.createElement("h1");t.textContent="Winner: "+e+"!",null==u||u.appendChild(t),null==u||u.appendChild(h)}}}let c;c=i.randomAttack(n);const m=document.querySelector(`[hposition="${c}"]`);let p=c,g=n.gameboard.convertPosition(p),b=n.gameboard.getRow(g),f=n.gameboard.getCol(g);if(Number.isInteger(n.gameboard.board[b][f]))null==m||m.classList.add("miss");else{null==m||m.classList.remove("ship-here"),null==m||m.classList.add("hit");let e=!1;if(n.gameboard.recieveAttack(t,s),n.gameboard.placedShips.forEach((t=>{t.name===r[b][f]&&(e=t.sunk)})),e){const e=document.createElement("h2");if(e.textContent=r[b][f],null==l||l.appendChild(e),n.gameboard.isOver()){const e=document.createElement("h1");e.textContent="Winner: Computer!",null==u||u.appendChild(e),null==u||u.appendChild(h)}}}})),null==c||c.appendChild(o)}}(e)}))}q();const E=document.querySelector(".randomly-place");function q(){let e=0;h.innerHTML="";for(let t=0;t<r.length;t++)for(let s=0;s<r[t].length;s++){e++;const n=document.createElement("div");n.setAttribute("data-hposition",e),Number.isInteger(r[t][s])||n.classList.add("ship-here"),n.classList.add("grid-item"),null==h||h.appendChild(n)}}null==E||E.addEventListener("click",(function(){g.forEach((e=>{n.gameboard.randomlyPlaceShips(e)})),E.disabled=!0,h.innerHTML="",q()})),document.querySelectorAll(".draggable").forEach((s=>{s.addEventListener("dragstart",(()=>{s.classList.add("dragging")})),s.addEventListener("dragend",(s=>{const i=s.target,r=parseInt(t.dataset.hposition);!function(e,t){if("carrier"===e)if(v.classList.contains("rotated")){if(!n.gameboard.validPlacement(t,5,!1))return void v.classList.remove("dragging");n.gameboard.placeShip(o,t,!1)}else n.gameboard.placeShip(o,t,!0);"destroyer"===e&&(v.classList.contains("rotated")?n.gameboard.placeShip(l,t,!1):n.gameboard.placeShip(l,t,!0)),"submarine"===e&&(v.classList.contains("rotated")?n.gameboard.placeShip(c,t,!1):n.gameboard.placeShip(c,t,!0)),"patrol"===e&&(v.classList.contains("rotated")?n.gameboard.placeShip(d,t,!1):n.gameboard.placeShip(d,t,!0))}(i.id,r),S(e)}))})),document.querySelectorAll(".grid-item").forEach((e=>{e.addEventListener("dragover",(e=>{t=e.target}))}))}!function(){const e=document.querySelector(".info"),t=document.createElement("div");t.classList.add("input-container");const s=document.createElement("label");s.textContent="Enter Name:";const n=document.createElement("input");n.classList.add("name-input");const i=document.createElement("button");i.classList.add("start-button"),i.textContent="Start",t.appendChild(s),t.appendChild(n),t.appendChild(i),null==e||e.appendChild(t),i.addEventListener("click",(function(){if(""!==n.value){const s=n.value;null==e||e.removeChild(t),S(s)}else{const s="To lazy to enter a name";null==e||e.removeChild(t),S(s)}}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======
(()=>{"use strict";class e{constructor(){this.board=[],this.createBoard(),this.hits=[],this.misses=[],this.placedShips=[],this.gameOver=!1,this.sunkShips=[]}createBoard(){let e=0;for(let t=0;t<10;t++){this.board[t]=[];for(let s=0;s<10;s++)e++,this.board[t][s]=e}}placeShip(e,t,s){if(s&&!0===this.validPlacement(t,e.length,!0)){for(let s=0;s<e.length;s++){for(let s=0;s<this.board.length;s++)if(this.board[s].includes(t)){let n=this.board[s].indexOf(t);this.board[s][n]=e.name}t+=10}this.placedShips.push(e)}else if(!s&&!0===this.validPlacement(t,e.length,!1)){for(let s=0;s<e.length;s++){for(let s=0;s<this.board.length;s++)if(this.board[s].includes(t)){let n=this.board[s].indexOf(t);this.board[s][n]=e.name}t+=1}this.placedShips.push(e)}}recieveAttack(e,t){let s=e+t;Number.isInteger(this.board[e][t])?this.misses.push(s):(this.hits.push(s),this.placedShips.forEach((n=>{if(n.name===this.board[e][t])return n.hit(s),n.isSunk(),void(n.isSunk()&&this.sunkShips.push(n))})))}isOver(){return 4===this.sunkShips.length}validPlacement(e,t,s){let n=this.convertPosition(e),i=this.getRow(n),r=this.getCol(n);if(s&&i+t>10)return!1;if(!s&&r+t>10)return!1;if(s)for(let e=0;e<t;e++){if(!Number.isInteger(this.board[i][r]))return!1;i++}else for(let e=0;e<t;e++){if(!Number.isInteger(this.board[i][r]))return!1;r++}return!0}randomlyPlaceShips(e){let t,s,n=!1;for(;!n;)t=Math.floor(100*Math.random())+1,s=Math.random()<.5,this.validPlacement(t,e.length,s)?(n=!0,this.placeShip(e,t,s)):n=!1}convertPosition(e){let t,s,n=e.toString();return e<11?(t=e-1,s=0):100===e?(s=9,t=9):e%10==0?(s=parseInt(n.slice(0,1)),t=9):(s=parseInt(n.slice(0,1)),t=parseInt(n.slice(1,2))-1),s.toString()+t.toString()}getCol(e){return parseInt(e.slice(1,2))}getRow(e){return parseInt(e.slice(0,1))}}class t{constructor(t,s){this.gameboard=new e,this.name=t,this.shots=[],this.oponent=s}attack(e,t){let s=this.gameboard.convertPosition(e),n=this.gameboard.getRow(s),i=this.gameboard.getCol(s);this.shots.includes(e)||(this.shots.push(e),t.gameboard.recieveAttack(n,i),t.gameboard.isOver())}randomAttack(e){let t,s=!1;for(;!s;){t=Math.floor(100*Math.random())+1;let n=this.gameboard.convertPosition(t),i=this.gameboard.getRow(n),r=this.gameboard.getCol(n);if(!this.shots.includes(t))return this.shots.push(t),e.gameboard.recieveAttack(i,r),s=!0,t}}}class s{constructor(e,t){this.length=e,this.isHit=[],this.sunk=!1,this.name=t}hit(e){if(!this.isHit.includes(e)&&this.isHit.length<this.length)return this.isHit.push(e),this.isHit}isSunk(){return this.isHit.length===this.length&&(this.sunk=!0,!0)}}let n=new t("human","computer"),i=new t("computer","human"),r=n.gameboard.board,a=i.gameboard.board,o=new s(5,"carrier"),l=new s(4,"destroyer"),c=new s(3,"submarine"),d=new s(2,"patrol"),u=new s(5,"carrier"),h=new s(4,"destroyer"),m=new s(3,"submarine"),p=new s(2,"patrol");const g=[o,l,c,d],b=[u,h,m,p];let f=0;function S(e){if(f++,4===[].length)return;let t;const s=document.querySelector(".info");null==s||s.classList.remove("info"),null==s||s.classList.add("hide");const u=document.querySelector(".place");null==u||u.classList.remove("hide");const h=document.querySelector(".grid-container"),m=document.querySelector(".ships"),p=document.querySelector(".rotate"),v=document.querySelector(".carrier"),L=document.querySelector(".destroyer"),y=document.querySelector(".submarine"),C=document.querySelector(".patrol");if(1===f){null==p||p.addEventListener("click",(function(){(null==v?void 0:v.classList.contains("rotated"))?(null==m||m.classList.remove("ships-horizontal"),null==m||m.classList.add("ships-vertical"),v.classList.remove("rotated"),null==L||L.classList.remove("rotated"),null==y||y.classList.remove("rotated"),null==C||C.classList.remove("rotated")):(null==m||m.classList.remove("ships-vertical"),null==m||m.classList.add("ships-horizontal"),null==v||v.classList.add("rotated"),null==L||L.classList.add("rotated"),null==y||y.classList.add("rotated"),null==C||C.classList.add("rotated"))}));const t=document.querySelector(".start-game");null==t||t.addEventListener("click",(function(){u.innerHTML="",function(e){document.querySelector("body"),console.log(r);const t=document.querySelector(".place");null==t||t.classList.add("hide");const s=document.querySelector("#main");s.classList.remove("hide"),s.classList.add("main"),document.querySelector(".content"),document.querySelector(".grid1");const o=document.querySelector(".grid-container1");document.querySelector(".title-1").textContent=e;const l=document.querySelector(".sunken1"),c=(document.querySelector(".grid2"),document.querySelector(".grid-container2"));document.querySelector(".title-2").textContent="Computer";const d=document.querySelector(".sunken2"),u=document.querySelector(".who-won"),h=document.createElement("button");h.classList.add("restart"),h.textContent="Restart",h.addEventListener("click",(function(){location.reload()})),b.forEach((e=>{i.gameboard.randomlyPlaceShips(e)}));let m=0;for(let e=0;e<r.length;e++)for(let t=0;t<r[e].length;t++){m++;const s=document.createElement("div");s.setAttribute("hposition",m),Number.isInteger(r[e][t])||s.classList.add("ship-here"),s.classList.add("grid-item"),null==o||o.appendChild(s)}for(let t=0;t<a.length;t++)for(let s=0;s<a[t].length;s++){const o=document.createElement("div");o.setAttribute("cposition",a[t][s]),o.classList.add("grid-item"),o.classList.add("ai-grid"),o.addEventListener("click",(function(){if(o.classList.contains("hit")||o.classList.contains("miss")||n.gameboard.isOver()||i.gameboard.isOver())return;if(Number.isInteger(a[t][s]))o.classList.add("miss");else{o.classList.add("hit");let n=!1;if(i.gameboard.recieveAttack(t,s),i.gameboard.placedShips.forEach((e=>{e.name===a[t][s]&&(n=e.sunk)})),n){const n=document.createElement("h2");if(n.textContent=a[t][s],null==d||d.appendChild(n),i.gameboard.isOver()){const t=document.createElement("h1");t.textContent="Winner: "+e+"!",null==u||u.appendChild(t),null==u||u.appendChild(h)}}}let c;c=i.randomAttack(n);const m=document.querySelector(`[hposition="${c}"]`);let p=c,g=n.gameboard.convertPosition(p),b=n.gameboard.getRow(g),f=n.gameboard.getCol(g);if(Number.isInteger(n.gameboard.board[b][f]))null==m||m.classList.add("miss");else{null==m||m.classList.remove("ship-here"),null==m||m.classList.add("hit");let e=!1;if(n.gameboard.recieveAttack(t,s),n.gameboard.placedShips.forEach((t=>{t.name===r[b][f]&&(e=t.sunk)})),e){const e=document.createElement("h2");if(e.textContent=r[b][f],null==l||l.appendChild(e),n.gameboard.isOver()){const e=document.createElement("h1");e.textContent="Winner: Computer!",null==u||u.appendChild(e),null==u||u.appendChild(h)}}}})),null==c||c.appendChild(o)}}(e)}))}q();const E=document.querySelector(".randomly-place");function q(){let e=0;h.innerHTML="";for(let t=0;t<r.length;t++)for(let s=0;s<r[t].length;s++){e++;const n=document.createElement("div");n.setAttribute("data-hposition",e),Number.isInteger(r[t][s])||n.classList.add("ship-here"),n.classList.add("grid-item"),null==h||h.appendChild(n)}}null==E||E.addEventListener("click",(function(){g.forEach((e=>{n.gameboard.randomlyPlaceShips(e)})),E.disabled=!0,h.innerHTML="",q()})),document.querySelectorAll(".draggable").forEach((s=>{s.addEventListener("dragstart",(()=>{s.classList.add("dragging")})),s.addEventListener("dragend",(s=>{const i=s.target,r=parseInt(t.dataset.hposition);!function(e,t){"carrier"===e&&(v.classList.contains("rotated")?n.gameboard.placeShip(o,t,!1):n.gameboard.placeShip(o,t,!0)),"destroyer"===e&&(v.classList.contains("rotated")?n.gameboard.placeShip(l,t,!1):n.gameboard.placeShip(l,t,!0)),"submarine"===e&&(v.classList.contains("rotated")?n.gameboard.placeShip(c,t,!1):n.gameboard.placeShip(c,t,!0)),"patrol"===e&&(v.classList.contains("rotated")?n.gameboard.placeShip(d,t,!1):n.gameboard.placeShip(d,t,!0))}(i.id,r),S(e)}))})),document.querySelectorAll(".grid-item").forEach((e=>{e.addEventListener("dragover",(e=>{t=e.target}))}))}!function(){const e=document.querySelector(".info"),t=document.createElement("div");t.classList.add("input-container");const s=document.createElement("label");s.textContent="Enter Name:";const n=document.createElement("input");n.classList.add("name-input");const i=document.createElement("button");i.classList.add("start-button"),i.textContent="Start",t.appendChild(s),t.appendChild(n),t.appendChild(i),null==e||e.appendChild(t),i.addEventListener("click",(function(){if(""!==n.value){const s=n.value;null==e||e.removeChild(t),S(s)}else{const s="To lazy to enter a name";null==e||e.removeChild(t),S(s)}}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> c8db90142714c5241cf20043366631c297f55e72
