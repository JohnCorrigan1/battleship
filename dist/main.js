(()=>{"use strict";class e{constructor(){this.board=[],this.createBoard(),this.hits=[],this.misses=[],this.placedShips=[],this.gameOver=!1,this.sunkShips=[]}createBoard(){let e=0;for(let t=0;t<10;t++){this.board[t]=[];for(let s=0;s<10;s++)e++,this.board[t][s]=e}}placeShip(e,t,s){if(s&&!0===this.validPlacement(t,e.length,!0)){for(let s=0;s<e.length;s++){for(let s=0;s<this.board.length;s++)if(this.board[s].includes(t)){let n=this.board[s].indexOf(t);this.board[s][n]=e.name}t+=10}this.placedShips.push(e)}else if(!s&&!0===this.validPlacement(t,e.length,!1)){for(let s=0;s<e.length;s++){for(let s=0;s<this.board.length;s++)if(this.board[s].includes(t)){let n=this.board[s].indexOf(t);this.board[s][n]=e.name}t+=1}this.placedShips.push(e)}}recieveAttack(e,t){let s=e+t;Number.isInteger(this.board[e][t])?this.misses.push(s):(this.hits.push(s),this.placedShips.forEach((n=>{if(n.name===this.board[e][t])return n.hit(s),n.isSunk(),void(n.isSunk()&&this.sunkShips.push(n))})))}isOver(){return 4===this.sunkShips.length}validPlacement(e,t,s){let n=this.convertPosition(e),r=this.getRow(n),i=this.getCol(n);if(s&&r+t>10)return!1;if(!s&&i+t>10)return!1;if(s)for(let e=0;e<t;e++){if(!Number.isInteger(this.board[r][i]))return!1;r++}else for(let e=0;e<t;e++){if(!Number.isInteger(this.board[r][i]))return!1;i++}return!0}randomlyPlaceShips(e){let t,s,n=!1;for(;!n;)t=Math.floor(100*Math.random())+1,s=Math.random()<.5,this.validPlacement(t,e.length,s)?(n=!0,this.placeShip(e,t,s)):n=!1}convertPosition(e){let t,s,n=e.toString();return e<11?(t=e-1,s=0):100===e?(s=9,t=9):e%10==0?(s=parseInt(n.slice(0,1)),t=9):(s=parseInt(n.slice(0,1)),t=parseInt(n.slice(1,2))-1),s.toString()+t.toString()}getCol(e){return parseInt(e.slice(1,2))}getRow(e){return parseInt(e.slice(0,1))}}class t{constructor(t,s){this.gameboard=new e,this.name=t,this.shots=[],this.oponent=s}attack(e,t){let s=this.gameboard.convertPosition(e),n=this.gameboard.getRow(s),r=this.gameboard.getCol(s);this.shots.includes(e)||(this.shots.push(e),t.gameboard.recieveAttack(n,r),t.gameboard.isOver())}randomAttack(e){let t,s=!1;for(;!s;){t=Math.floor(100*Math.random())+1;let n=this.gameboard.convertPosition(t),r=this.gameboard.getRow(n),i=this.gameboard.getCol(n);if(!this.shots.includes(t))return console.log(t),this.shots.push(t),e.gameboard.recieveAttack(r,i),s=!0,t}}}class s{constructor(e,t){this.length=e,this.isHit=[],this.sunk=!1,this.name=t}hit(e){if(!this.isHit.includes(e)&&this.isHit.length<this.length)return this.isHit.push(e),this.isHit}isSunk(){return this.isHit.length===this.length&&(this.sunk=!0,!0)}}let n=new t("human","computer"),r=new t("computer","human"),i=n.gameboard.board,o=r.gameboard.board,a=new s(5,"carrier"),l=new s(4,"destroyer"),c=new s(3,"submarine"),d=new s(2,"patrol"),u=new s(5,"carrier"),h=new s(4,"destroyer"),m=new s(3,"submarine"),p=new s(2,"patrol");const g=[a,l,c,d],b=[u,h,m,p];function f(e){const t=document.querySelector(".info");null==t||t.classList.remove("info"),null==t||t.classList.add("hide");const s=document.querySelector(".place");null==s||s.classList.remove("hide"),document.querySelector(".place");const u=document.querySelector(".grid-container");document.querySelector(".title-1").textContent=e;const h=document.querySelector(".ships"),m=document.querySelector(".rotate"),p=document.querySelector(".carrier"),f=document.querySelector(".destroyer"),S=document.querySelector(".submarine"),v=document.querySelector(".patrol");let L;document.querySelectorAll(".draggable").forEach((e=>{e.addEventListener("dragstart",(()=>{e.classList.add("dragging")})),e.addEventListener("dragend",(t=>{var s,r;t.preventDefault(),e.classList.remove("dragging"),console.log("dropped"),console.log(t.target),console.log(t),L=t.target,console.log(k.dataset.hposition),console.log(L.id),s=parseInt(k.dataset.hposition),"carrier"===(r=L.id)&&(p.classList.contains("rotated")?n.gameboard.placeShip(a,s,!1):n.gameboard.placeShip(a,s,!0)),"destroyer"===r&&(p.classList.contains("rotated")?n.gameboard.placeShip(l,s,!1):n.gameboard.placeShip(l,s,!0)),"submarine"===r&&(p.classList.contains("rotated")?n.gameboard.placeShip(c,s,!1):n.gameboard.placeShip(c,s,!0)),"patrol"===r&&(p.classList.contains("rotated")?n.gameboard.placeShip(d,s,!1):n.gameboard.placeShip(d,s,!0)),u.innerHTML="",q()}))})),null==m||m.addEventListener("click",(function(){(null==p?void 0:p.classList.contains("rotated"))?(null==h||h.classList.remove("ships-horizontal"),null==h||h.classList.add("ships-vertical"),p.classList.remove("rotated"),null==f||f.classList.remove("rotated"),null==S||S.classList.remove("rotated"),null==v||v.classList.remove("rotated")):(null==h||h.classList.remove("ships-vertical"),null==h||h.classList.add("ships-horizontal"),null==p||p.classList.add("rotated"),null==f||f.classList.add("rotated"),null==S||S.classList.add("rotated"),null==v||v.classList.add("rotated"))}));const y=document.querySelector(".start-game");null==y||y.addEventListener("click",(function(){s.innerHTML="",function(e){document.querySelector("body");const t=document.querySelector(".place");null==t||t.classList.add("hide");const s=document.querySelector("#main");s.classList.remove("hide"),s.classList.add("main"),document.querySelector(".content"),document.querySelector(".grid1");const a=document.querySelector(".grid-container1");document.querySelector(".title-1").textContent=e;const l=document.querySelector(".sunken1"),c=(document.querySelector(".grid2"),document.querySelector(".grid-container2"));document.querySelector(".title-2").textContent="Computer";const d=document.querySelector(".sunken2"),u=document.querySelector(".who-won"),h=document.createElement("button");h.classList.add("restart"),h.textContent="Restart",h.addEventListener("click",(function(){location.reload()})),b.forEach((e=>{r.gameboard.randomlyPlaceShips(e)}));let m=0;for(let e=0;e<i.length;e++)for(let t=0;t<i[e].length;t++){m++;const s=document.createElement("div");s.setAttribute("hposition",m),Number.isInteger(i[e][t])||s.classList.add("ship-here"),s.classList.add("grid-item"),null==a||a.appendChild(s)}for(let t=0;t<o.length;t++)for(let s=0;s<o[t].length;s++){const a=document.createElement("div");a.setAttribute("cposition",o[t][s]),a.classList.add("grid-item"),a.classList.add("ai-grid"),a.addEventListener("click",(function(){if(a.classList.contains("hit")||a.classList.contains("miss")||n.gameboard.isOver()||r.gameboard.isOver())return;if(Number.isInteger(o[t][s]))a.classList.add("miss");else{a.classList.add("hit");let n=!1;if(r.gameboard.recieveAttack(t,s),r.gameboard.placedShips.forEach((e=>{e.name===o[t][s]&&(n=e.sunk)})),n){const n=document.createElement("h2");if(n.textContent=o[t][s],null==d||d.appendChild(n),r.gameboard.isOver()){const t=document.createElement("h1");t.textContent="Winner: "+e+"!",null==u||u.appendChild(t),null==u||u.appendChild(h)}}}let c;c=r.randomAttack(n);const m=document.querySelector(`[hposition="${c}"]`);let p=c,g=n.gameboard.convertPosition(p),b=n.gameboard.getRow(g),f=n.gameboard.getCol(g);if(Number.isInteger(n.gameboard.board[b][f]))null==m||m.classList.add("miss");else{null==m||m.classList.remove("ship-here"),null==m||m.classList.add("hit");let e=!1;if(n.gameboard.recieveAttack(t,s),n.gameboard.placedShips.forEach((t=>{t.name===i[b][f]&&(e=t.sunk)})),e){const e=document.createElement("h2");if(e.textContent=i[b][f],null==l||l.appendChild(e),n.gameboard.isOver()){const e=document.createElement("h1");e.textContent="Winner: Computer!",null==u||u.appendChild(e),null==u||u.appendChild(h)}}}})),null==c||c.appendChild(a)}}(e)}));let C=0;for(let e=0;e<i.length;e++)for(let t=0;t<i[e].length;t++){C++;const e=document.createElement("div");e.setAttribute("data-hposition",C),e.classList.add("grid-item"),null==u||u.appendChild(e)}function q(){let e=0;for(let t=0;t<i.length;t++)for(let s=0;s<i[t].length;s++){e++;const n=document.createElement("div");n.setAttribute("hposition",e),Number.isInteger(i[t][s])||n.classList.add("ship-here"),n.classList.add("grid-item"),null==u||u.appendChild(n)}}const E=document.querySelector(".randomly-place");let k;null==E||E.addEventListener("click",(function(){g.forEach((e=>{n.gameboard.randomlyPlaceShips(e)})),E.disabled=!0,u.innerHTML="",q()})),document.querySelectorAll(".grid-item").forEach((e=>{e.addEventListener("dragover",(e=>{k=e.target}))}))}!function(){const e=document.querySelector(".info"),t=document.createElement("div");t.classList.add("input-container");const s=document.createElement("label");s.textContent="Enter Name:";const n=document.createElement("input");n.classList.add("name-input");const r=document.createElement("button");r.classList.add("start-button"),r.textContent="Start",t.appendChild(s),t.appendChild(n),t.appendChild(r),null==e||e.appendChild(t),r.addEventListener("click",(function(){if(""!==n.value){const s=n.value;null==e||e.removeChild(t),f(s)}else{const s="To lazy to enter a name";null==e||e.removeChild(t),f(s)}}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,