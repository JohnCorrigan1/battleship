(()=>{"use strict";class t{constructor(){this.board=[],this.createBoard(),this.hits=[],this.misses=[],this.placedShips=[],this.gameOver=!1,this.sunkShips=[]}createBoard(){let t=0;for(let e=0;e<10;e++){this.board[e]=[];for(let s=0;s<10;s++)t++,this.board[e][s]=t}}placeShip(t,e,s){if(s&&!0===this.validPlacement(e,t.length,!0)){for(let s=0;s<t.length;s++){for(let s=0;s<this.board.length;s++)if(this.board[s].includes(e)){let i=this.board[s].indexOf(e);this.board[s][i]=t.name}e+=10}this.placedShips.push(t)}else if(!s&&!0===this.validPlacement(e,t.length,!1)){for(let s=0;s<t.length;s++){for(let s=0;s<this.board.length;s++)if(this.board[s].includes(e)){let i=this.board[s].indexOf(e);this.board[s][i]=t.name}e+=1}this.placedShips.push(t)}}recieveAttack(t,e){let s=t+e;Number.isInteger(this.board[t][e])?this.misses.push(s):(this.hits.push(s),this.placedShips.forEach((i=>{if(i.name===this.board[t][e])return i.hit(s),i.isSunk(),void(i.isSunk()&&this.sunkShips.push(i))})))}isOver(){return 4===this.sunkShips.length}validPlacement(t,e,s){let i=this.convertPosition(t),r=this.getRow(i),n=this.getCol(i);if(s&&r+e>10)return!1;if(!s&&n+e>10)return!1;if(s)for(let t=0;t<e;t++){if(!Number.isInteger(this.board[r][n]))return!1;r++}else for(let t=0;t<e;t++){if(!Number.isInteger(this.board[r][n]))return!1;n++}return!0}randomlyPlaceShips(t){let e,s,i=!1;for(;!i;)e=Math.floor(100*Math.random())+1,s=Math.random()<.5,this.validPlacement(e,t.length,s)?(i=!0,this.placeShip(t,e,s)):i=!1}convertPosition(t){let e,s,i=t.toString();return t<11?(e=t-1,s=0):100===t?(s=9,e=9):(s=parseInt(i.slice(0,1)),e=parseInt(i.slice(1,2))-1),s.toString()+e.toString()}getCol(t){return parseInt(t.slice(1,2))}getRow(t){return parseInt(t.slice(0,1))}}class e{constructor(e,s){this.gameboard=new t,this.name=e,this.shots=[],this.oponent=s}attack(t,e){let s=this.gameboard.convertPosition(t),i=this.gameboard.getRow(s),r=this.gameboard.getCol(s);this.shots.includes(t)||(this.shots.push(t),e.gameboard.recieveAttack(i,r),e.gameboard.isOver())}randomAttack(t){let e,s=!1;for(;!s;){e=Math.floor(100*Math.random())+1;let i=this.gameboard.convertPosition(e),r=this.gameboard.getRow(i),n=this.gameboard.getCol(i);if(!this.shots.includes(e)){let i;return console.log(e),this.shots.push(e),t.gameboard.recieveAttack(r,n),s=!0,i=r.toString()+n.toString(),i}}}}class s{constructor(t,e){this.length=t,this.isHit=[],this.sunk=!1,this.name=e}hit(t){if(!this.isHit.includes(t)&&this.isHit.length<this.length)return this.isHit.push(t),this.isHit}isSunk(){return this.isHit.length===this.length&&(this.sunk=!0,!0)}}!function(t){document.querySelector("body");const i=document.querySelector(".grid-container1");document.querySelector(".title-1").textContent="jjcrazyman",document.querySelector(".sunken1");const r=document.querySelector(".grid-container2");document.querySelector(".title-2").textContent="Computer";const n=document.querySelector(".sunken2");let o=new e("human","computer"),a=new e("computer","human"),l=o.gameboard.board,h=a.gameboard.board;const d=[new s(5,"carrier"),new s(4,"destroyer"),new s(3,"submarine"),new s(2,"patrol")];[new s(5,"carrier"),new s(4,"destroyer"),new s(3,"submarine"),new s(2,"patrol")].forEach((t=>{a.gameboard.randomlyPlaceShips(t)})),d.forEach((t=>{o.gameboard.randomlyPlaceShips(t)}));for(let t=0;t<l.length;t++)for(let e=0;e<l[t].length;e++){const s=document.createElement("div");s.setAttribute("hposition",l[t][e]),Number.isInteger(l[t][e])||s.classList.add("ship-here"),s.classList.add("grid-item"),null==i||i.appendChild(s)}for(let t=0;t<h.length;t++)for(let e=0;e<h[t].length;e++){const s=document.createElement("div");s.setAttribute("cposition",h[t][e]),s.classList.add("grid-item"),s.classList.add("ai-grid"),s.addEventListener("click",(function(){if(Number.isInteger(h[t][e]))s.classList.add("miss");else{s.classList.add("hit");let i=!1;if(a.gameboard.recieveAttack(t,e),a.gameboard.placedShips.forEach((s=>{s.name===h[t][e]&&(i=s.sunk)})),i){const s=document.createElement("h2");s.textContent=h[t][e],null==n||n.appendChild(s),a.gameboard.isOver()&&alert("You win")}}let i;i=a.randomAttack(o);let r=o.gameboard.getRow(i),d=o.gameboard.getCol(i);const c=document.querySelector(`[hposition="${i}"]`);Number.isInteger(l[r][d])?null==c||c.classList.add("miss"):null==c||c.classList.add("hit")})),null==r||r.appendChild(s)}document.querySelectorAll(".grid-item")}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,