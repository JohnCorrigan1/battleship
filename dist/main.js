(()=>{"use strict";class e{constructor(){this.board=[],this.createBoard(),this.hits=[],this.misses=[],this.placedShips=[],this.gameOver=!1,this.sunkShips=[]}createBoard(){let e=0;for(let t=0;t<10;t++){this.board[t]=[];for(let s=0;s<10;s++)e++,this.board[t][s]=e}}placeShip(e,t,s){if(s&&!0===this.validPlacement(t,e.length,!0)){for(let s=0;s<e.length;s++){for(let s=0;s<this.board.length;s++)if(this.board[s].includes(t)){let i=this.board[s].indexOf(t);this.board[s][i]=e.name}t+=10}this.placedShips.push(e)}else if(!s&&!0===this.validPlacement(t,e.length,!1)){for(let s=0;s<e.length;s++){for(let s=0;s<this.board.length;s++)if(this.board[s].includes(t)){let i=this.board[s].indexOf(t);this.board[s][i]=e.name}t+=1}this.placedShips.push(e)}}recieveAttack(e,t){let s=e+t;Number.isInteger(this.board[e][t])?this.misses.push(s):(this.hits.push(s),this.placedShips.forEach((i=>{if(i.name===this.board[e][t])return i.hit(s),i.isSunk(),void(i.isSunk()&&this.sunkShips.push(i))})))}isOver(){return 4===this.sunkShips.length}validPlacement(e,t,s){let i=this.convertPosition(e),n=this.getRow(i),a=this.getCol(i);if(s&&n+t>10)return!1;if(!s&&a+t>10)return!1;if(s)for(let e=0;e<t;e++){if(!Number.isInteger(this.board[n][a]))return!1;n++}else for(let e=0;e<t;e++){if(!Number.isInteger(this.board[n][a]))return!1;a++}return!0}randomlyPlaceShips(e){let t,s,i=!1;for(;!i;)t=Math.floor(100*Math.random())+1,s=Math.random()<.5,this.validPlacement(t,e.length,s)?(i=!0,this.placeShip(e,t,s)):i=!1}convertPosition(e){let t,s,i=e.toString();return e<11?(t=e-1,s=0):100===e?(s=9,t=9):e%10==0?(s=parseInt(i.slice(0,1)),t=9):(s=parseInt(i.slice(0,1)),t=parseInt(i.slice(1,2))-1),s.toString()+t.toString()}getCol(e){return parseInt(e.slice(1,2))}getRow(e){return parseInt(e.slice(0,1))}}class t{constructor(t,s){this.gameboard=new e,this.name=t,this.shots=[],this.oponent=s}attack(e,t){let s=this.gameboard.convertPosition(e),i=this.gameboard.getRow(s),n=this.gameboard.getCol(s);this.shots.includes(e)||(this.shots.push(e),t.gameboard.recieveAttack(i,n),t.gameboard.isOver())}randomAttack(e){let t,s=!1;for(;!s;){t=Math.floor(100*Math.random())+1;let i=this.gameboard.convertPosition(t),n=this.gameboard.getRow(i),a=this.gameboard.getCol(i);if(!this.shots.includes(t))return this.shots.push(t),e.gameboard.recieveAttack(n,a),s=!0,t}}}class s{constructor(e,t){this.length=e,this.isHit=[],this.sunk=!1,this.name=t}hit(e){if(!this.isHit.includes(e)&&this.isHit.length<this.length)return this.isHit.push(e),this.isHit}isSunk(){return this.isHit.length===this.length&&(this.sunk=!0,!0)}}let i=new t("human","computer"),n=new t("computer","human"),a=i.gameboard.board,r=n.gameboard.board,l=new s(5,"carrier"),o=new s(4,"destroyer"),d=new s(3,"submarine"),c=new s(2,"patrol"),u=new s(5,"carrier"),h=new s(4,"destroyer"),m=new s(3,"submarine"),g=new s(2,"patrol");const p=[l,o,d,c],b=[u,h,m,g];let v=0;function f(e){if(v++,4===[].length)return;let t;const s=document.querySelector(".info");null==s||s.classList.remove("info"),null==s||s.classList.add("hide");const u=document.querySelector(".place");null==u||u.classList.remove("hide");const h=document.querySelector(".grid-container"),m=document.querySelector(".ships"),g=document.querySelector(".rotate"),L=document.querySelector(".carrier"),S=document.querySelector(".destroyer"),C=document.querySelector(".submarine"),y=document.querySelector(".patrol");if(1===v){null==g||g.addEventListener("click",(function(){(null==L?void 0:L.classList.contains("rotated"))?(null==m||m.classList.remove("ships-horizontal"),null==m||m.classList.add("ships-vertical"),L.classList.remove("rotated"),null==S||S.classList.remove("rotated"),null==C||C.classList.remove("rotated"),null==y||y.classList.remove("rotated")):(null==m||m.classList.remove("ships-vertical"),null==m||m.classList.add("ships-horizontal"),null==L||L.classList.add("rotated"),null==S||S.classList.add("rotated"),null==C||C.classList.add("rotated"),null==y||y.classList.add("rotated"))}));const t=document.querySelector(".start-game");null==t||t.addEventListener("click",(function(){u.innerHTML="",function(e){document.querySelector("body"),console.log(a);const t=document.querySelector(".place");null==t||t.classList.add("hide");const s=document.querySelector("#main");s.classList.remove("hide"),s.classList.add("main"),document.querySelector(".content"),document.querySelector(".grid1");const l=document.querySelector(".grid-container1");document.querySelector(".title-1").textContent=e;const o=document.querySelector(".sunken1"),d=(document.querySelector(".grid2"),document.querySelector(".grid-container2"));document.querySelector(".title-2").textContent="Computer";const c=document.querySelector(".sunken2"),u=document.querySelector(".who-won"),h=document.createElement("button");h.classList.add("restart"),h.textContent="Restart",h.addEventListener("click",(function(){location.reload()})),b.forEach((e=>{n.gameboard.randomlyPlaceShips(e)}));let m=0;for(let e=0;e<a.length;e++)for(let t=0;t<a[e].length;t++){m++;const s=document.createElement("div");s.setAttribute("hposition",m),Number.isInteger(a[e][t])||s.classList.add("ship-here"),s.classList.add("grid-item"),null==l||l.appendChild(s)}for(let t=0;t<r.length;t++)for(let s=0;s<r[t].length;s++){const l=document.createElement("div");l.setAttribute("cposition",r[t][s]),l.classList.add("grid-item"),l.classList.add("ai-grid"),l.addEventListener("click",(function(){if(l.classList.contains("hit")||l.classList.contains("miss")||i.gameboard.isOver()||n.gameboard.isOver())return;if(Number.isInteger(r[t][s]))l.classList.add("miss"),l.textContent="X";else{l.classList.add("hit");let i=!1;if(n.gameboard.recieveAttack(t,s),n.gameboard.placedShips.forEach((e=>{e.name===r[t][s]&&(i=e.sunk)})),i){const i=document.createElement("h2");if(i.textContent=r[t][s],null==c||c.appendChild(i),n.gameboard.isOver()){const t=document.createElement("h1");t.textContent="Winner: "+e+"!",null==u||u.appendChild(t),null==u||u.appendChild(h)}}}let d;d=n.randomAttack(i);const m=document.querySelector(`[hposition="${d}"]`);let g=d,p=i.gameboard.convertPosition(g),b=i.gameboard.getRow(p),v=i.gameboard.getCol(p);if(Number.isInteger(i.gameboard.board[b][v]))null==m||m.classList.add("miss"),m.textContent="x";else{null==m||m.classList.remove("ship-here"),null==m||m.classList.add("hit");let e=!1;if(i.gameboard.recieveAttack(t,s),i.gameboard.placedShips.forEach((t=>{t.name===a[b][v]&&(e=t.sunk)})),e){const e=document.createElement("h2");if(e.textContent=a[b][v],null==o||o.appendChild(e),i.gameboard.isOver()){const e=document.createElement("h1");e.textContent="Winner: Computer!",null==u||u.appendChild(e),null==u||u.appendChild(h)}}}})),null==d||d.appendChild(l)}}(e)}))}q();const E=document.querySelector(".randomly-place");function q(){let e=0;h.innerHTML="";for(let t=0;t<a.length;t++)for(let s=0;s<a[t].length;s++){e++;const i=document.createElement("div");i.setAttribute("data-hposition",e),Number.isInteger(a[t][s])||i.classList.add("ship-here"),i.classList.add("grid-item"),null==h||h.appendChild(i)}}null==E||E.addEventListener("click",(function(){p.forEach((e=>{i.gameboard.randomlyPlaceShips(e)})),E.disabled=!0,h.innerHTML="",q()})),document.querySelectorAll(".draggable").forEach((s=>{s.addEventListener("dragstart",(()=>{s.classList.add("dragging")})),s.addEventListener("dragend",(s=>{const n=s.target,a=parseInt(t.dataset.hposition);!function(e,t){if(!1===E.disabled&&(E.disabled=!0),"carrier"===e)if(L.classList.contains("rotated")){if(!i.gameboard.validPlacement(t,5,!1))return void L.classList.remove("dragging");i.gameboard.placeShip(l,t,!1),null==m||m.removeChild(L)}else i.gameboard.validPlacement(t,5,!0)?(i.gameboard.placeShip(l,t,!0),null==m||m.removeChild(L)):L.classList.remove("dragging");if("destroyer"===e)if(S.classList.contains("rotated")){if(!i.gameboard.validPlacement(t,4,!1))return void S.classList.remove("dragging");i.gameboard.placeShip(o,t,!1),null==m||m.removeChild(S)}else i.gameboard.validPlacement(t,4,!0)?(i.gameboard.placeShip(o,t,!0),null==m||m.removeChild(S)):S.classList.remove("dragging");if("submarine"===e)if(C.classList.contains("rotated")){if(!i.gameboard.validPlacement(t,3,!1))return void C.classList.remove("dragging");i.gameboard.placeShip(d,t,!1),null==m||m.removeChild(C)}else i.gameboard.validPlacement(t,3,!0)?(i.gameboard.placeShip(d,t,!0),null==m||m.removeChild(C)):C.classList.remove("dragging");if("patrol"===e)if(y.classList.contains("rotated")){if(!i.gameboard.validPlacement(t,2,!1))return void y.classList.remove("dragging");i.gameboard.placeShip(c,t,!1),null==m||m.removeChild(y)}else i.gameboard.validPlacement(t,2,!0)?(i.gameboard.placeShip(c,t,!0),null==m||m.removeChild(y)):y.classList.remove("dragging")}(n.id,a),f(e)}))})),document.querySelectorAll(".grid-item").forEach((e=>{e.addEventListener("dragover",(e=>{t=e.target}))}))}!function(){const e=document.querySelector(".info"),t=document.createElement("div");t.classList.add("input-container");const s=document.createElement("label");s.textContent="Enter Name:";const i=document.createElement("input");i.classList.add("name-input");const n=document.createElement("button");n.classList.add("start-button"),n.textContent="Start",t.appendChild(s),t.appendChild(i),t.appendChild(n),null==e||e.appendChild(t),n.addEventListener("click",(function(){if(""!==i.value){const s=i.value;null==e||e.removeChild(t),f(s)}else{const s="To lazy to enter a name";null==e||e.removeChild(t),f(s)}}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,