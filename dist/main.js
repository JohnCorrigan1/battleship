(()=>{"use strict";class t{constructor(){this.board=[],this.createBoard(),this.hits=[],this.misses=[],this.placedShips=[],this.gameOver=!1}createBoard(){let t=0;for(let e=0;e<10;e++){this.board[e]=[];for(let i=0;i<10;i++)t++,this.board[e][i]=t}}placeShip(t,e,i){if(i&&!0===this.validPlacement(e,t.length,!0)){for(let i=0;i<t.length;i++){for(let i=0;i<this.board.length;i++)if(this.board[i].includes(e)){let s=this.board[i].indexOf(e);this.board[i][s]=t.name}e+=10}this.placedShips.push(t)}else if(!i&&!0===this.validPlacement(e,t.length,!1)){for(let i=0;i<t.length;i++){for(let i=0;i<this.board.length;i++)if(this.board[i].includes(e)){let s=this.board[i].indexOf(e);this.board[i][s]=t.name}e+=1}this.placedShips.push(t)}}recieveAttack(t){let e,i,s=t.toString();t<11?(e=t-1,i=0):100===t?(i=9,e=9):(i=parseInt(s.slice(0,1)),e=parseInt(s.slice(1,2))-1),Number.isInteger(this.board[i][e])?this.misses.push(t):(this.hits.push(t),this.placedShips.forEach((s=>{if(s.name===this.board[i][e])return s.hit(t),void s.isSunk()})))}isOver(){for(let t=0;t<this.placedShips.length;t++)if(this.placedShips[t].sunk=!1)return!1;return!0}validPlacement(t,e,i){let s,r,n=t.toString();if(t<11)s=t-1,r=0;else{if(100===t)return!1;r=parseInt(n.slice(0,1)),s=t%10==0?9:parseInt(n.slice(1,2))-1}if(i&&r+e>10)return!1;if(!i&&s+e>10)return!1;if(i)for(let t=0;t<e;t++){if(!Number.isInteger(this.board[r][s]))return!1;r++}else for(let t=0;t<e;t++){if(!Number.isInteger(this.board[r][s]))return!1;s++}return!0}randomlyPlaceShips(t){let e,i,s=!1;for(;!s;)e=Math.floor(100*Math.random())+1,i=Math.random()<.5,this.validPlacement(e,t.length,i)?(s=!0,this.placeShip(t,e,i)):s=!1}}class e{constructor(e,i){this.gameboard=new t,this.name=e,this.shots=[],this.oponent=i}attack(t,e){this.shots.includes(t)||(this.shots.push(t),e.gameboard.recieveAttack(t),e.gameboard.isOver())}randomAttack(t){let e,i=!1;for(;!i;)e=Math.floor(100*Math.random())+1,this.shots.includes(e)||(console.log(e),this.shots.push(e),t.gameboard.recieveAttack(e),i=!0)}}class i{constructor(t,e){this.length=t,this.isHit=[],this.sunk=!1,this.name=e}hit(t){if(!this.isHit.includes(t)&&this.isHit.length<this.length)return this.isHit.push(t),this.isHit}isSunk(){return this.isHit.length===this.length&&(this.sunk=!0,!0)}}!function(t){document.querySelector("body");const s=document.querySelector(".grid-container1");document.querySelector(".title-1").textContent="jjcrazyman";const r=document.querySelector(".grid-container2");document.querySelector(".title-2").textContent="Computer";let n=new e("human","computer"),a=new e("computer","human"),h=n.gameboard.board;[new i(5,"carrier"),new i(4,"destroyer"),new i(3,"submarine"),new i(2,"patrol")].forEach((t=>{a.gameboard.randomlyPlaceShips(t),n.gameboard.randomlyPlaceShips(t)}));for(let t=0;t<h.length;t++)for(let e=0;e<h[t].length;e++){const i=document.createElement("div");i.setAttribute("position",h[t][e]),Number.isInteger(h[t][e])||i.classList.add("ship-here"),i.classList.add("grid-item"),null==s||s.appendChild(i)}for(let t=0;t<h.length;t++)for(let e=0;e<h[t].length;e++){const i=document.createElement("div");i.setAttribute("position",h[t][e]),i.classList.add("grid-item"),i.classList.add("ai-grid"),i.addEventListener("click",(function(){Number.isInteger(h[t][e])?i.classList.add("miss"):i.classList.add("hit")})),null==r||r.appendChild(i)}document.querySelectorAll(".grid-item")}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,