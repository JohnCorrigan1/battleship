(()=>{"use strict";class e{constructor(){this.board=[],this.createBoard(),this.hits=[],this.misses=[],this.placedShips=[],this.gameOver=!1,this.sunkShips=[]}createBoard(){let e=0;for(let t=0;t<10;t++){this.board[t]=[];for(let n=0;n<10;n++)e++,this.board[t][n]=e}}placeShip(e,t,n){if(n&&!0===this.validPlacement(t,e.length,!0)){for(let n=0;n<e.length;n++){for(let n=0;n<this.board.length;n++)if(this.board[n].includes(t)){let s=this.board[n].indexOf(t);this.board[n][s]=e.name}t+=10}this.placedShips.push(e)}else if(!n&&!0===this.validPlacement(t,e.length,!1)){for(let n=0;n<e.length;n++){for(let n=0;n<this.board.length;n++)if(this.board[n].includes(t)){let s=this.board[n].indexOf(t);this.board[n][s]=e.name}t+=1}this.placedShips.push(e)}}recieveAttack(e,t){let n=e+t;Number.isInteger(this.board[e][t])?this.misses.push(n):(this.hits.push(n),this.placedShips.forEach((s=>{if(s.name===this.board[e][t])return s.hit(n),s.isSunk(),void(s.isSunk()&&this.sunkShips.push(s))})))}isOver(){return 4===this.sunkShips.length}validPlacement(e,t,n){let s=this.convertPosition(e),i=this.getRow(s),r=this.getCol(s);if(n&&i+t>10)return!1;if(!n&&r+t>10)return!1;if(n)for(let e=0;e<t;e++){if(!Number.isInteger(this.board[i][r]))return!1;i++}else for(let e=0;e<t;e++){if(!Number.isInteger(this.board[i][r]))return!1;r++}return!0}randomlyPlaceShips(e){let t,n,s=!1;for(;!s;)t=Math.floor(100*Math.random())+1,n=Math.random()<.5,this.validPlacement(t,e.length,n)?(s=!0,this.placeShip(e,t,n)):s=!1}convertPosition(e){let t,n,s=e.toString();return e<11?(t=e-1,n=0):100===e?(n=9,t=9):e%10==0?(n=parseInt(s.slice(0,1)),t=9):(n=parseInt(s.slice(0,1)),t=parseInt(s.slice(1,2))-1),n.toString()+t.toString()}getCol(e){return parseInt(e.slice(1,2))}getRow(e){return parseInt(e.slice(0,1))}}class t{constructor(t,n){this.gameboard=new e,this.name=t,this.shots=[],this.oponent=n}attack(e,t){let n=this.gameboard.convertPosition(e),s=this.gameboard.getRow(n),i=this.gameboard.getCol(n);this.shots.includes(e)||(this.shots.push(e),t.gameboard.recieveAttack(s,i),t.gameboard.isOver())}randomAttack(e){let t,n=!1;for(;!n;){t=Math.floor(100*Math.random())+1;let s=this.gameboard.convertPosition(t),i=this.gameboard.getRow(s),r=this.gameboard.getCol(s);if(!this.shots.includes(t))return this.shots.push(t),e.gameboard.recieveAttack(i,r),n=!0,t}}}class n{constructor(e,t){this.length=e,this.isHit=[],this.sunk=!1,this.name=t}hit(e){if(!this.isHit.includes(e)&&this.isHit.length<this.length)return this.isHit.push(e),this.isHit}isSunk(){return this.isHit.length===this.length&&(this.sunk=!0,!0)}}let s=new t("human","computer"),i=new t("computer","human"),r=s.gameboard.board,a=i.gameboard.board,o=new n(5,"carrier"),l=new n(4,"destroyer"),c=new n(3,"submarine"),d=new n(2,"patrol"),u=new n(5,"carrier"),h=new n(4,"destroyer"),m=new n(3,"submarine"),p=new n(2,"patrol");const g=[o,l,c,d],b=[u,h,m,p];function f(e){const t=[];let n;const u=document.querySelector(".info");null==u||u.classList.remove("info"),null==u||u.classList.add("hide");const h=document.querySelector(".place");null==h||h.classList.remove("hide");const m=document.querySelector(".grid-container");document.querySelector(".title-1").textContent=e;const p=document.querySelector(".ships"),f=document.querySelector(".rotate"),S=document.querySelector(".carrier"),v=document.querySelector(".destroyer"),L=document.querySelector(".submarine"),y=document.querySelector(".patrol");null==f||f.addEventListener("click",(function(){(null==S?void 0:S.classList.contains("rotated"))?(null==p||p.classList.remove("ships-horizontal"),null==p||p.classList.add("ships-vertical"),S.classList.remove("rotated"),null==v||v.classList.remove("rotated"),null==L||L.classList.remove("rotated"),null==y||y.classList.remove("rotated")):(null==p||p.classList.remove("ships-vertical"),null==p||p.classList.add("ships-horizontal"),null==S||S.classList.add("rotated"),null==v||v.classList.add("rotated"),null==L||L.classList.add("rotated"),null==y||y.classList.add("rotated"))}));const C=document.querySelector(".start-game");null==C||C.addEventListener("click",(function(){h.innerHTML="",function(e){document.querySelector("body");const t=document.querySelector(".place");null==t||t.classList.add("hide");const n=document.querySelector("#main");n.classList.remove("hide"),n.classList.add("main"),document.querySelector(".content"),document.querySelector(".grid1");const o=document.querySelector(".grid-container1");document.querySelector(".title-1").textContent=e;const l=document.querySelector(".sunken1"),c=(document.querySelector(".grid2"),document.querySelector(".grid-container2"));document.querySelector(".title-2").textContent="Computer";const d=document.querySelector(".sunken2"),u=document.querySelector(".who-won"),h=document.createElement("button");h.classList.add("restart"),h.textContent="Restart",h.addEventListener("click",(function(){location.reload()})),b.forEach((e=>{i.gameboard.randomlyPlaceShips(e)}));let m=0;for(let e=0;e<r.length;e++)for(let t=0;t<r[e].length;t++){m++;const n=document.createElement("div");n.setAttribute("hposition",m),Number.isInteger(r[e][t])||n.classList.add("ship-here"),n.classList.add("grid-item"),null==o||o.appendChild(n)}for(let t=0;t<a.length;t++)for(let n=0;n<a[t].length;n++){const o=document.createElement("div");o.setAttribute("cposition",a[t][n]),o.classList.add("grid-item"),o.classList.add("ai-grid"),o.addEventListener("click",(function(){if(o.classList.contains("hit")||o.classList.contains("miss")||s.gameboard.isOver()||i.gameboard.isOver())return;if(Number.isInteger(a[t][n]))o.classList.add("miss");else{o.classList.add("hit");let s=!1;if(i.gameboard.recieveAttack(t,n),i.gameboard.placedShips.forEach((e=>{e.name===a[t][n]&&(s=e.sunk)})),s){const s=document.createElement("h2");if(s.textContent=a[t][n],null==d||d.appendChild(s),i.gameboard.isOver()){const t=document.createElement("h1");t.textContent="Winner: "+e+"!",null==u||u.appendChild(t),null==u||u.appendChild(h)}}}let c;c=i.randomAttack(s);const m=document.querySelector(`[hposition="${c}"]`);let p=c,g=s.gameboard.convertPosition(p),b=s.gameboard.getRow(g),f=s.gameboard.getCol(g);if(Number.isInteger(s.gameboard.board[b][f]))null==m||m.classList.add("miss");else{null==m||m.classList.remove("ship-here"),null==m||m.classList.add("hit");let e=!1;if(s.gameboard.recieveAttack(t,n),s.gameboard.placedShips.forEach((t=>{t.name===r[b][f]&&(e=t.sunk)})),e){const e=document.createElement("h2");if(e.textContent=r[b][f],null==l||l.appendChild(e),s.gameboard.isOver()){const e=document.createElement("h1");e.textContent="Winner: Computer!",null==u||u.appendChild(e),null==u||u.appendChild(h)}}}})),null==c||c.appendChild(o)}}(e)}));let E=0;for(let e=0;e<r.length;e++)for(let t=0;t<r[e].length;t++){E++;const e=document.createElement("div");e.setAttribute("data-hposition",E),e.classList.add("grid-item"),null==m||m.appendChild(e)}const q=document.querySelector(".randomly-place");function k(){m.innerHTML="";let e=0;for(let t=0;t<r.length;t++)for(let n=0;n<r[t].length;n++){e++;const s=document.createElement("div");s.setAttribute("hposition",e),Number.isInteger(r[t][n])||s.classList.add("ship-here"),s.classList.add("grid-item"),null==m||m.appendChild(s)}}null==q||q.addEventListener("click",(function(){g.forEach((e=>{s.gameboard.randomlyPlaceShips(e)})),q.disabled=!0,m.innerHTML="",k()})),document.querySelectorAll(".draggable").forEach((e=>{e.addEventListener("dragend",(e=>{const i=e.target,a=parseInt(n.dataset.hposition),u=[i.id,a];var h;t.push(u),4===(h=t).length&&(h.forEach((e=>{!function(e,t){"carrier"===t&&(S.classList.contains("rotated")?s.gameboard.placeShip(o,e,!1):s.gameboard.placeShip(o,e,!0)),"destroyer"===t&&(S.classList.contains("rotated")?s.gameboard.placeShip(l,e,!1):s.gameboard.placeShip(l,e,!0)),"submarine"===t&&(S.classList.contains("rotated")?s.gameboard.placeShip(c,e,!1):s.gameboard.placeShip(c,e,!0)),"patrol"===t&&(S.classList.contains("rotated")?s.gameboard.placeShip(d,e,!1):s.gameboard.placeShip(d,e,!0))}(e[1],e[0])})),console.log(r),m.innerHTML="",k())}))})),document.querySelectorAll(".grid-item").forEach((e=>{e.addEventListener("dragover",(e=>{n=e.target}))}))}!function(){const e=document.querySelector(".info"),t=document.createElement("div");t.classList.add("input-container");const n=document.createElement("label");n.textContent="Enter Name:";const s=document.createElement("input");s.classList.add("name-input");const i=document.createElement("button");i.classList.add("start-button"),i.textContent="Start",t.appendChild(n),t.appendChild(s),t.appendChild(i),null==e||e.appendChild(t),i.addEventListener("click",(function(){if(""!==s.value){const n=s.value;null==e||e.removeChild(t),f(n)}else{const n="To lazy to enter a name";null==e||e.removeChild(t),f(n)}}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,