(()=>{"use strict";class t{constructor(){this.board=[],this.createBoard(),this.hits=[],this.misses=[],this.placedShips=[],this.gameOver=!1}createBoard(){let t=0;for(let e=0;e<10;e++){this.board[e]=[];for(let s=0;s<10;s++)t++,this.board[e][s]=t}}placeShip(t,e,s){if(s&&!0===this.validPlacement(e,t.length,!0)){for(let s=0;s<t.length;s++){for(let s=0;s<this.board.length;s++)if(this.board[s].includes(e)){let i=this.board[s].indexOf(e);this.board[s][i]=t.name}e+=10}this.placedShips.push(t)}else if(!s&&!0===this.validPlacement(e,t.length,!1)){for(let s=0;s<t.length;s++){for(let s=0;s<this.board.length;s++)if(this.board[s].includes(e)){let i=this.board[s].indexOf(e);this.board[s][i]=t.name}e+=1}this.placedShips.push(t)}}recieveAttack(t){let e,s,i=t.toString();t<11?(e=t-1,s=0):100===t?(s=9,e=9):(s=parseInt(i.slice(0,1)),e=parseInt(i.slice(1,2))-1),Number.isInteger(this.board[s][e])?this.misses.push(t):(this.hits.push(t),this.placedShips.forEach((i=>{if(i.name===this.board[s][e])return i.hit(t),void i.isSunk()})))}isOver(){for(let t=0;t<this.placedShips.length;t++)if(this.placedShips[t].sunk=!1)return!1;return!0}validPlacement(t,e,s){let i,n,r=t.toString();if(t<11)i=t-1,n=0;else{if(100===t)return!1;n=parseInt(r.slice(0,1)),i=t%10==0?9:parseInt(r.slice(1,2))}let a=n;return console.log(n,i),console.log("string"==typeof this.board[a][i]),!!(s&&n+e-1<10)||!s&&i+e-1<10}randomlyPlaceShips(t){let e,s,i=!1;for(;!i;){if(e=Math.floor(100*Math.random())+1,s=Math.random()<.5,this.validPlacement(e,t.length,s))return this.placeShip(t,e,s),void(i=!0);i=!1}}}class e{constructor(e,s){this.gameboard=new t,this.name=e,this.shots=[],this.oponent=s}attack(t,e){this.shots.includes(t)||(this.shots.push(t),e.gameboard.recieveAttack(t),e.gameboard.isOver())}randomAttack(t){let e,s=!1;for(;!s;)e=Math.floor(100*Math.random())+1,this.shots.includes(e)||(console.log(e),this.shots.push(e),t.gameboard.recieveAttack(e),s=!0)}}class s{constructor(t,e){this.length=t,this.isHit=[],this.sunk=!1,this.name=e}hit(t){if(!this.isHit.includes(t)&&this.isHit.length<this.length)return this.isHit.push(t),this.isHit}isSunk(){return this.isHit.length===this.length&&(this.sunk=!0,!0)}}function i(t){document.querySelector("body");const i=document.querySelector(".grid-container1");document.querySelector(".title-1").textContent=t;const n=document.querySelector(".grid-container2");document.querySelector(".title-2").textContent="Computer";let r=new e("human","computer"),a=new e("computer","human"),o=r.gameboard.board;[new s(5,"carrier"),new s(4,"destroyer"),new s(3,"submarine"),new s(2,"patrol")].forEach((t=>{a.gameboard.randomlyPlaceShips(t),r.gameboard.randomlyPlaceShips(t)}));for(let t=0;t<o.length;t++)for(let e=0;e<o[t].length;e++){const s=document.createElement("div");s.setAttribute("position",o[t][e]),s.textContent=o[t][e],Number.isInteger(o[t][e])||s.classList.add("ship-here"),s.classList.add("grid-item"),null==i||i.appendChild(s)}for(let t=0;t<o.length;t++)for(let e=0;e<o[t].length;e++){const s=document.createElement("div");s.setAttribute("position",o[t][e]),s.classList.add("grid-item"),s.classList.add("ai-grid"),s.addEventListener("click",(function(){Number.isInteger(o[t][e])?s.classList.add("miss"):s.classList.add("hit")})),null==n||n.appendChild(s)}document.querySelectorAll(".grid-item")}!function(){const t=document.querySelector(".info"),e=document.createElement("div");e.classList.add("input-container");const s=document.createElement("label");s.textContent="Enter Name:";const n=document.createElement("input");n.classList.add("name-input");const r=document.createElement("button");r.classList.add("start-button"),r.textContent="Start",e.appendChild(s),e.appendChild(n),e.appendChild(r),null==t||t.appendChild(e),r.addEventListener("click",(function(){if(""!==n.value){const s=n.value;null==t||t.removeChild(e),i(s)}else{const s="To lazy to enter a name";null==t||t.removeChild(e),i(s)}}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,