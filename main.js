(()=>{"use strict";class e{constructor(){this.board=[],this.createBoard(),this.hits=[],this.misses=[],this.placedShips=[],this.gameOver=!1,this.sunkShips=[]}createBoard(){let e=0;for(let t=0;t<10;t++){this.board[t]=[];for(let n=0;n<10;n++)e++,this.board[t][n]=e}}placeShip(e,t,n){if(n&&!0===this.validPlacement(t,e.length,!0)){for(let n=0;n<e.length;n++){for(let n=0;n<this.board.length;n++)if(this.board[n].includes(t)){let s=this.board[n].indexOf(t);this.board[n][s]=e.name}t+=10}this.placedShips.push(e)}else if(!n&&!0===this.validPlacement(t,e.length,!1)){for(let n=0;n<e.length;n++){for(let n=0;n<this.board.length;n++)if(this.board[n].includes(t)){let s=this.board[n].indexOf(t);this.board[n][s]=e.name}t+=1}this.placedShips.push(e)}}recieveAttack(e,t){let n=e+t;Number.isInteger(this.board[e][t])?this.misses.push(n):(this.hits.push(n),this.placedShips.forEach((s=>{if(s.name===this.board[e][t])return s.hit(n),s.isSunk(),void(s.isSunk()&&this.sunkShips.push(s))})))}isOver(){return 4===this.sunkShips.length}validPlacement(e,t,n){let s=this.convertPosition(e),i=this.getRow(s),r=this.getCol(s);if(n&&i+t>10)return!1;if(!n&&r+t>10)return!1;if(n)for(let e=0;e<t;e++){if(!Number.isInteger(this.board[i][r]))return!1;i++}else for(let e=0;e<t;e++){if(!Number.isInteger(this.board[i][r]))return!1;r++}return!0}randomlyPlaceShips(e){let t,n,s=!1;for(;!s;)t=Math.floor(100*Math.random())+1,n=Math.random()<.5,this.validPlacement(t,e.length,n)?(s=!0,this.placeShip(e,t,n)):s=!1}convertPosition(e){let t,n,s=e.toString();return e<11?(t=e-1,n=0):100===e?(n=9,t=9):e%10==0?(n=parseInt(s.slice(0,1)),t=9):(n=parseInt(s.slice(0,1)),t=parseInt(s.slice(1,2))-1),n.toString()+t.toString()}getCol(e){return parseInt(e.slice(1,2))}getRow(e){return parseInt(e.slice(0,1))}}class t{constructor(t,n){this.gameboard=new e,this.name=t,this.shots=[],this.oponent=n}attack(e,t){let n=this.gameboard.convertPosition(e),s=this.gameboard.getRow(n),i=this.gameboard.getCol(n);this.shots.includes(e)||(this.shots.push(e),t.gameboard.recieveAttack(s,i),t.gameboard.isOver())}randomAttack(e){let t,n=!1;for(;!n;){t=Math.floor(100*Math.random())+1;let s=this.gameboard.convertPosition(t),i=this.gameboard.getRow(s),r=this.gameboard.getCol(s);if(!this.shots.includes(t))return console.log(t),this.shots.push(t),e.gameboard.recieveAttack(i,r),n=!0,t}}}class n{constructor(e,t){this.length=e,this.isHit=[],this.sunk=!1,this.name=t}hit(e){if(!this.isHit.includes(e)&&this.isHit.length<this.length)return this.isHit.push(e),this.isHit}isSunk(){return this.isHit.length===this.length&&(this.sunk=!0,!0)}}function s(e){document.querySelector("body");const s=document.querySelector(".info");null==s||s.classList.remove("info"),null==s||s.classList.add("hide");const r=document.querySelector("#main");r.classList.remove("hide"),r.classList.add("main"),document.querySelector(".grid1");const o=document.querySelector(".grid-container1");document.querySelector(".title-1").textContent=e;const a=document.querySelector(".sunken1"),l=(document.querySelector(".grid2"),document.querySelector(".grid-container2"));document.querySelector(".title-2").textContent="Computer";const d=document.querySelector(".sunken2"),c=document.querySelector(".who-won"),h=document.createElement("button");h.textContent="Restart",h.addEventListener("click",(function(){r.innerHTML="",i()}));let u=new t("human","computer"),m=new t("computer","human"),p=u.gameboard.board,g=m.gameboard.board;const b=[new n(5,"carrier"),new n(4,"destroyer"),new n(3,"submarine"),new n(2,"patrol")];[new n(5,"carrier"),new n(4,"destroyer"),new n(3,"submarine"),new n(2,"patrol")].forEach((e=>{m.gameboard.randomlyPlaceShips(e)})),b.forEach((e=>{u.gameboard.randomlyPlaceShips(e)}));let f=0;for(let e=0;e<p.length;e++)for(let t=0;t<p[e].length;t++){f++;const n=document.createElement("div");n.setAttribute("hposition",f),Number.isInteger(p[e][t])||n.classList.add("ship-here"),n.classList.add("grid-item"),null==o||o.appendChild(n)}for(let t=0;t<g.length;t++)for(let n=0;n<g[t].length;n++){const s=document.createElement("div");s.setAttribute("cposition",g[t][n]),s.classList.add("grid-item"),s.classList.add("ai-grid"),s.addEventListener("click",(function(){if(s.classList.contains("hit")||s.classList.contains("miss")||u.gameboard.isOver()||m.gameboard.isOver())return;if(Number.isInteger(g[t][n]))s.classList.add("miss");else{s.classList.add("hit");let i=!1;if(m.gameboard.recieveAttack(t,n),m.gameboard.placedShips.forEach((e=>{e.name===g[t][n]&&(i=e.sunk)})),i){const s=document.createElement("h2");if(s.textContent=g[t][n],null==d||d.appendChild(s),m.gameboard.isOver()){const t=document.createElement("h1");t.textContent="Winner: "+e+"!",null==c||c.appendChild(t),null==c||c.appendChild(h)}}}let i;i=m.randomAttack(u);const r=document.querySelector(`[hposition="${i}"]`);let o=i,l=u.gameboard.convertPosition(o),b=u.gameboard.getRow(l),f=u.gameboard.getCol(l);if(Number.isInteger(u.gameboard.board[b][f]))null==r||r.classList.add("miss");else{null==r||r.classList.add("hit");let e=!1;if(u.gameboard.recieveAttack(t,n),u.gameboard.placedShips.forEach((t=>{t.name===p[b][f]&&(e=t.sunk)})),e){const e=document.createElement("h2");if(e.textContent=p[b][f],null==a||a.appendChild(e),u.gameboard.isOver()){const e=document.createElement("h1");e.textContent="Winner: Computer!",null==c||c.appendChild(e),null==c||c.appendChild(h)}}}})),null==l||l.appendChild(s)}}function i(){const e=document.querySelector(".info"),t=document.createElement("div");t.classList.add("input-container");const n=document.createElement("label");n.textContent="Enter Name:";const i=document.createElement("input");i.classList.add("name-input");const r=document.createElement("button");r.classList.add("start-button"),r.textContent="Start",t.appendChild(n),t.appendChild(i),t.appendChild(r),null==e||e.appendChild(t),r.addEventListener("click",(function(){if(""!==i.value){const n=i.value;null==e||e.removeChild(t),s(n)}else{const n="To lazy to enter a name";null==e||e.removeChild(t),s(n)}}))}i()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,